"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[2878],{8063:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>g,contentTitle:()=>k,default:()=>f,frontMatter:()=>p,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"configuration/plugins/overview","title":"Plugins Overview","description":"An Overview of Unmanic Plugins","source":"@site/docs/configuration/plugins/overview.mdx","sourceDirName":"configuration/plugins","slug":"/configuration/plugins/overview","permalink":"/docs/configuration/plugins/overview","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Plugins Overview","description":"An Overview of Unmanic Plugins","id":"overview"},"sidebar":"docs","previous":{"title":"Workers","permalink":"/docs/configuration/workers_settings"},"next":{"title":"Installing Plugins","permalink":"/docs/configuration/plugins/installing_plugins"}}');var t=o(4848),r=o(8453),i=o(6540),a=o(5556),c=o.n(a),l=o(8193);class u extends i.Component{constructor(e){super(e),this.state={}}componentDidMount(){l.A.canUseDOM&&this.setState({Flowchart:o(5512).A})}render(){const{Flowchart:e}=this.state,{chartCode:s,scale:o=.6}=this.props;return l.A.canUseDOM&&e?(0,t.jsx)("div",{style:{overflowX:"scroll"},children:(0,t.jsx)(e,{options:{x:0,y:0,"line-width":2,"line-length":50,"text-margin":10,"font-size":14,"font-color":"black","line-color":"black","element-color":"black",fill:"white","yes-text":"yes","no-text":"no","arrow-end":"block",scale:.7,symbols:{start:{"font-color":"red","element-color":"green","font-weight":"bold"},end:{"font-color":"red","element-color":"green","font-weight":"bold"}},flowstate:{runner:{fill:"pink"},external:{fill:"green"}}},chartCode:s})}):(0,t.jsx)("div",{})}}u.propTypes={chartCode:c().string.isRequired,scale:c().number};const d=u,p={title:"Plugins Overview",description:"An Overview of Unmanic Plugins",id:"overview"},k=void 0,g={},h=[{value:"Plugin execution during Task flow",id:"plugin-execution-during-task-flow",level:2}];function m(e){const s={a:"a",h2:"h2",hr:"hr",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:'Unmanic features a plugin system to extend Unmanic\'s capabilities.\nPlugins are stand-alone scripts or "modules" that are executed by Unmanic at defined stages during its task processing.'}),"\n",(0,t.jsx)(s.p,{children:"Usually, plugins are designed to carry out one function only.\nHowever, in order to carry out that one function, some plugins are designed to be executed at multiple stages of task processing."}),"\n",(0,t.jsxs)(s.p,{children:["For example, you may install a plugin that will run during the library scan process to detect files that need to be added to the ",(0,t.jsx)(s.a,{href:"/docs/dashboard/pending_tasks",children:"pending tasks"})," queue due to an incorrect video codec.\nWhen the ",(0,t.jsx)(s.a,{href:"/docs/dashboard/workers",children:"worker"})," picks up the task, it may execute that same plugin again which will now handle the job of transcoding the video streams to the configured codec."]}),"\n",(0,t.jsx)(s.p,{children:"In this example the plugin has carried out two separate jobs at different stages of Unmanic's task processing."}),"\n",(0,t.jsx)(s.p,{children:"Use plugins to build powerful library optimisation flows."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"plugin-execution-during-task-flow",children:"Plugin execution during Task flow"}),"\n",(0,t.jsx)(s.p,{children:"Sections in pink will execute plugins configured for that stage of the process."}),"\n",(0,t.jsx)(d,{chartCode:"\n  st=>start: Start\n  discoverFile=>operation: File discovered by Library Scanner or Event Monitor.\n  libraryTestFileStart=>operation: Library Manager creates a list of all plugin it needs for testing files.\n  libraryTestFileExecPlugin=>operation: Library Management - File test\nCheck if file should be added to pending tasks?|runner\n  libraryTestPluginRequestIgnoreFile=>condition: Did the plugin request that\nUnmanic ignore this file?\n  libraryTestPluginRequestTaskCreate=>condition: Did the plugin request that\nUnmanic create a task for this file?\n  libraryTestFileTaskCheckLoop=>condition: Has the Library Manager completed\nexecuting all plugins?\n  fileNotAdded=>operation: File not added. to pending tasks queue.\n  pendingTasks=>operation: Added to pending tasks list.\n  workerCollects=>operation: Worker picks up file from pending tasks queue.\n  workerProcessTaskStart=>operation: Worker creates a list of all plugins it needs to run.\n  workerExecPlugin=>operation: Worker - Processing file\nworker executes a single plugin.|runner\n  workerExecPluginCheck=>condition: Did the plugin execute OK?\n  workerExecPluginRequestCommand=>condition: Did the plugin request that\nUnmanic execute a command?\n  workerExecCommand=>operation: Worker executes the command given by the plugin.\n  workerExecCommandCheck=>condition: Did the command execute OK?\n  workerProcessTaskCheckLoop=>condition: Has the worker completed\nexecuting all plugins?\n  workerCompletesTask=>operation: Worker completes task and places it into a Post Processor queue\n  postProcessorFileMoveTaskStart=>operation: Post-processor creates a list of all plugins it needs to run for file movements.\n  postProcessorFileMoveExecPlugin=>operation: Post-processor - File movements\nPost-processor executes a single file movement plugin.|runner\n  postProcessorFileMoveTaskCheckLoop=>condition: Has the Post-processor completed\nexecuting all plugins?\n  postProcessorTaskSuccessTaskStart=>operation: Post-processor creates a list of all plugins it needs to run for task results.\n  postProcessorTaskSuccessExecPlugin=>operation: Post-processor - Marking task success/failure\nPost-processor executes a single task results plugin.|runner\n  postProcessorTaskSuccessTaskCheckLoop=>condition: Has the Post-processor completed\nexecuting all plugins?\n  taskSuccess=>condition: Were all jobs for this task successful?\n  completedTasksFailed=>operation: Task added to history as failure.\n  completedTasksSuccess=>operation: Task added to history as success.\n  eIgnored=>end: End - File ignored\n  eFailed=>end: End - File failed at least one stage of being processed\n  eSuccess=>end: End - File successfully processed\n  \n  st->discoverFile->libraryTestFileStart\n  libraryTestFileStart->libraryTestFileExecPlugin->libraryTestPluginRequestIgnoreFile\n  libraryTestPluginRequestIgnoreFile(yes,right)->fileNotAdded->eIgnored\n  libraryTestPluginRequestIgnoreFile(no,bottom)->libraryTestPluginRequestTaskCreate\n  libraryTestPluginRequestTaskCreate(yes,left)->pendingTasks\n  libraryTestPluginRequestTaskCreate(no,bottom)->libraryTestFileTaskCheckLoop\n  libraryTestFileTaskCheckLoop(no,left)->libraryTestFileExecPlugin\n  libraryTestFileTaskCheckLoop(yes,right)->fileNotAdded->eIgnored\n  pendingTasks->workerCollects->workerProcessTaskStart\n  workerProcessTaskStart->workerExecPlugin->workerExecPluginCheck\n  workerExecPluginCheck(no,right)->workerCompletesTask\n  workerExecPluginCheck(yes,bottom)->workerExecPluginRequestCommand\n  workerExecPluginRequestCommand(yes,bottom)->workerExecCommand\n  workerExecPluginRequestCommand(no,right)->workerProcessTaskCheckLoop\n  workerExecCommand->workerExecCommandCheck\n  workerExecCommandCheck(no,bottom)->workerCompletesTask\n  workerExecCommandCheck(yes,right)->workerProcessTaskCheckLoop\n  workerProcessTaskCheckLoop(no,right)->workerExecPlugin\n  workerProcessTaskCheckLoop(yes,bottom)->workerCompletesTask\n  workerCompletesTask->postProcessorFileMoveTaskStart->postProcessorFileMoveExecPlugin\n  postProcessorFileMoveExecPlugin(bottom)->postProcessorFileMoveTaskCheckLoop\n  postProcessorFileMoveTaskCheckLoop(no,right)->postProcessorFileMoveExecPlugin\n  postProcessorFileMoveTaskCheckLoop(yes,bottom)->postProcessorTaskSuccessTaskStart\n  postProcessorTaskSuccessTaskStart->postProcessorTaskSuccessExecPlugin\n  postProcessorTaskSuccessExecPlugin->postProcessorTaskSuccessTaskCheckLoop\n  postProcessorTaskSuccessTaskCheckLoop(no,right)->postProcessorTaskSuccessExecPlugin\n  postProcessorTaskSuccessTaskCheckLoop(yes,bottom)->taskSuccess\n  taskSuccess(no,right)->completedTasksFailed->eFailed\n  taskSuccess(yes,bottom)->completedTasksSuccess->eSuccess\n"})]})}function f(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}}}]);