"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[717],{2602:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"development/plugin_manager_cli","title":"Plugin Manager CLI","description":"Unmanic has a built-in Plugin Manager CLI.","source":"@site/docs/development/plugin_manager_cli.mdx","sourceDirName":"development","slug":"/development/plugin_manager_cli","permalink":"/docs/development/plugin_manager_cli","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Plugin Manager CLI","id":"plugin_manager_cli"},"sidebar":"docs","previous":{"title":"Creating a Pull Request to the Official Repository","permalink":"/docs/development/plugin_repos/creating_a_pull_request"},"next":{"title":"Docker Hardware Acceleration - VAAPI","permalink":"/docs/advanced/hardware_accelerated_encoding_vaapi"}}');var l=t(4848),r=t(8453);const a={title:"Plugin Manager CLI",id:"plugin_manager_cli"},s=void 0,d={},c=[];function o(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["Unmanic has a built-in ",(0,l.jsx)(n.strong,{children:"Plugin Manager CLI"}),".\nTo access this, run:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"unmanic --manage_plugins\n"})}),"\n",(0,l.jsx)(n.p,{children:"This will not run the main Unmanic service and may be run while already\nrunning the Unmanic service without any interference."}),"\n",(0,l.jsx)(n.p,{children:"You will be presented with the main menu"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"$ unmanic --manage_plugins\nStarting migrations\nThere is nothing to migrate\nUnmanicLogger - SETUP LOGGER\n[?] What would you like to do?: List all installed plugins\n > List all installed plugins\n   Test plugins\n   Create new plugin\n   Reload all plugins from disk\n   Remove plugin\n   Exit\n"})}),"\n",(0,l.jsx)(n.p,{children:"From here you may select on of the available options."}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Option"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"List installed plugins"}),(0,l.jsx)(n.td,{children:"Lists all currently installed Plugins and their status within Unmanic's database"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Test plugins"}),(0,l.jsx)(n.td,{children:"Menu. Lists all currently installed Plugins. Select one to test it"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Create new plugin"}),(0,l.jsx)(n.td,{children:"Executes a guided process to generate a new Plugin template"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Reload plugin from disk"}),(0,l.jsx)(n.td,{children:"Reload all Plugin data into the database and update any requirements"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Remove plugin"}),(0,l.jsx)(n.td,{children:"Delete the Plugin directory and all contents and remove the Plugin from the database"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Exit"}),(0,l.jsx)(n.td,{children:"Exits the Plugin Manager CLI"})]})]})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const l={},r=i.createContext(l);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);