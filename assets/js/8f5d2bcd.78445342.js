"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[1875],{5027:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"guides/basic_auth_nginx.md","title":"Basic Authentication with Nginx","description":"Basic Authentication with Nginx","source":"@site/docs/guides/basic_auth_nginx.md","sourceDirName":"guides","slug":"/guides/basic_auth_nginx.md","permalink":"/docs/guides/basic_auth_nginx.md","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Basic Authentication with Nginx","description":"Basic Authentication with Nginx","id":"basic_auth_nginx.md"}}');var s=t(4848),a=t(8453);const o={title:"Basic Authentication with Nginx",description:"Basic Authentication with Nginx",id:"basic_auth_nginx.md"},r=void 0,c={},d=[{value:"Requirements",id:"requirements",level:2},{value:"Password File",id:"password-file",level:2},{value:"Nginx Config",id:"nginx-config",level:2},{value:"Activate Config",id:"activate-config",level:3}];function l(e){const n={admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Unmanic can use basic authentication when connecting to another instance. Authentication itself however isn't built into Unmanic. Instead a reverse proxy like Nginx must be used to handle the authentication."}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.p,{children:["A running Unmanic instance is required. We will put this instance behind basic authentication.",(0,s.jsx)(n.br,{}),"\n","Install Nginx on your system. On Debian, the package name is ",(0,s.jsx)(n.code,{children:"nginx"}),".",(0,s.jsx)(n.br,{}),"\n",'To create the file containing our users for basic auth, we need the program "htpasswd". On Debian it is contained in the package ',(0,s.jsx)(n.code,{children:"apache2-utils"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo apt install nginx apache2-utils\n"})}),"\n",(0,s.jsx)(n.h2,{id:"password-file",children:"Password File"}),"\n",(0,s.jsxs)(n.p,{children:["We will be creating a password file under the path ",(0,s.jsx)(n.code,{children:"/etc/apache2/.htpasswd"}),(0,s.jsx)(n.br,{}),"\n","To create the file and a first user run this command.",(0,s.jsx)(n.br,{}),"\n","You will be prompted to enter a password."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"If a file already exists in that path it will be overwritten!"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo htpasswd -c /etc/apache2/.htpasswd [USER]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you want to add more users to the same file, use the command without the ",(0,s.jsx)(n.code,{children:"-c"})," option."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo htpasswd /etc/apache2/.htpasswd [USER]\n"})}),"\n",(0,s.jsx)(n.p,{children:"The permissions on the .htpasswd file should look something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"-rw-r--r-- 1 root root 43 Jun  1 17:46 /etc/apache2/.htpasswd\n"})}),"\n",(0,s.jsx)(n.h2,{id:"nginx-config",children:"Nginx Config"}),"\n",(0,s.jsxs)(n.p,{children:["Now we'll be going over the nginx config.",(0,s.jsx)(n.br,{}),"\n","On Debian, site configurations go into ",(0,s.jsx)(n.code,{children:"/etc/nginx/sites-available/"}),(0,s.jsx)(n.br,{}),"\n","Create a new file under that directory"]}),"\n",(0,s.jsx)(n.p,{children:"Open the file in your preferred editor and insert the following content:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-nginx",children:'server {\n    server_name [YOUR DOMAIN NAME];\n\n    # Security / XSS Mitigation Headers\n    add_header X-Frame-Options "SAMEORIGIN";\n    add_header X-XSS-Protection "1; mode=block";\n    add_header X-Content-Type-Options "nosniff";\n\n\n    client_max_body_size [MAX FILE SIZE];\n\n    location / {\n        # Proxy main traffic\n        proxy_pass http://[UNMANIC IP];\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Protocol $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n\n        # Proxy WebSocket connection\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "Upgrade";\n\n        # Basic Authentication\n        auth_basic           "Unmanic";\n        auth_basic_user_file [HTPASSWORD FILE];\n    }\n\n    listen *:80;\n\n    #listen *:443 ssl http2;\n    #ssl_certificate_key /etc/certificate/key.pem;\n    #ssl_certificate /etc/certificate/cert.pem;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"You'll have to change some of the settings from the file above to fit your setup."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"server_name: If available, set this to your domain name. You can remove this line if you don't use a domain."}),"\n",(0,s.jsxs)(n.li,{children:["client_max_body_size: Only necessary for linked installations. Set this value higher than the largest video file you want to transcode. ",(0,s.jsx)(n.strong,{children:"If this value is too small, files won't be transferred and fail to transcode"}),"\nYou can enter a value like ",(0,s.jsx)(n.code,{children:"50G"})," for 50 GBs or completely disable this check with ",(0,s.jsx)(n.code,{children:"client_max_body_size 0;"})]}),"\n",(0,s.jsxs)(n.li,{children:["proxy_pass: If you run Nginx and Unmanic on the same server with default settings this will be ",(0,s.jsx)(n.code,{children:"http://127.0.0.1:8888"}),". Else, change the ip address and port number to match with your setup"]}),"\n",(0,s.jsxs)(n.li,{children:['auth_basic_user_file: Insert the path of your "htpasswd" File. If you followed this guide, it should be ',(0,s.jsx)(n.code,{children:"/etc/apache2/.htpasswd"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Optionally, you can also set up SSL certificates and uncomment the ",(0,s.jsx)(n.code,{children:"listen *:443 ssl http2;"})," and the two below. Modify them to point to your certificate file and key and make sure to remove the ",(0,s.jsx)(n.code,{children:"listen *:80;"})," above."]}),"\n",(0,s.jsx)(n.h3,{id:"activate-config",children:"Activate Config"}),"\n",(0,s.jsxs)(n.p,{children:["To activate the configuration file, symlink it to ",(0,s.jsx)(n.code,{children:"/etc/nginx/sites-enabled/"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo ln -s /etc/nginx/sites-available/[UNMANIC CONFIG] /etc/nginx/sites-enabled/\n"})}),"\n",(0,s.jsx)(n.p,{children:"Remove the default Nginx configuration file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo rm /etc/nginx/sites-enabled/default\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reload Nginx to install the new configuration file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"sudo systemctl reload nginx\n"})}),"\n",(0,s.jsx)(n.p,{children:"If everything went well, you should be seeing a login prompt now if you try to access your server through the web browser."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);