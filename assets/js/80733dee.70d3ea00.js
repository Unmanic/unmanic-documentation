"use strict";(self.webpackChunkunmanic_documentation=self.webpackChunkunmanic_documentation||[]).push([[1242],{1737:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"development/writing_plugins/plugin_runner_types","title":"Plugin Runners","description":"This page outlines the various Plugin types and their","source":"@site/docs/development/writing_plugins/plugin_runner_types.mdx","sourceDirName":"development/writing_plugins","slug":"/development/writing_plugins/plugin_runner_types","permalink":"/docs/development/writing_plugins/plugin_runner_types","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Plugin Runners","id":"plugin_runner_types"},"sidebar":"docs","previous":{"title":"Accessing System Info","permalink":"/docs/development/writing_plugins/system_info"},"next":{"title":"Creating Your Own Repository","permalink":"/docs/development/plugin_repos/creating_your_own_repo"}}');var s=t(4848),r=t(8453),l=(t(6540),t(5195));const o={tableOfContentsInline:"tableOfContentsInline_prmo"};function a({toc:e,minHeadingLevel:n,maxHeadingLevel:t}){return(0,s.jsx)("div",{className:o.tableOfContentsInline,children:(0,s.jsx)(l.A,{toc:e,minHeadingLevel:n,maxHeadingLevel:t,className:"table-of-contents",linkClassName:null})})}const d={title:"Plugin Runners",id:"plugin_runner_types"},c=void 0,h={},u=[{value:"Library Management - File test",id:"library-management---file-test",level:2},{value:"Executed:",id:"executed",level:5},{value:"Function:",id:"function",level:5},{value:"Provided data:",id:"provided-data",level:5},{value:"Example:",id:"example",level:5},{value:"Details:",id:"details",level:5},{value:"Worker - Processing file",id:"worker---processing-file",level:2},{value:"Executed:",id:"executed-1",level:5},{value:"Function:",id:"function-1",level:5},{value:"Provided data:",id:"provided-data-1",level:5},{value:"Example:",id:"example-1",level:5},{value:"Details:",id:"details-1",level:5},{value:"Post-processor - File movements",id:"post-processor---file-movements",level:2},{value:"Executed:",id:"executed-2",level:5},{value:"Function:",id:"function-2",level:5},{value:"Provided data:",id:"provided-data-2",level:5},{value:"Example:",id:"example-2",level:5},{value:"Details:",id:"details-2",level:5},{value:"Post-processor - Marking task success/failure",id:"post-processor---marking-task-successfailure",level:2},{value:"Executed:",id:"executed-3",level:5},{value:"Function:",id:"function-3",level:5},{value:"Provided data:",id:"provided-data-3",level:5},{value:"Example:",id:"example-3",level:5},{value:"Frontend - Data Panel",id:"frontend---data-panel",level:2},{value:"Executed:",id:"executed-4",level:5},{value:"Function:",id:"function-4",level:5},{value:"Provided data:",id:"provided-data-4",level:5},{value:"Example:",id:"example-4",level:5},{value:"Details:",id:"details-3",level:5},{value:"Frontend - Plugin API",id:"frontend---plugin-api",level:2},{value:"Executed:",id:"executed-5",level:5},{value:"Function:",id:"function-5",level:5},{value:"Provided data:",id:"provided-data-5",level:5},{value:"Example:",id:"example-5",level:5},{value:"Details:",id:"details-4",level:5}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["This page outlines the various Plugin types and their\n",(0,s.jsx)(n.a,{href:"/docs/development/writing_plugins/introduction#runners",children:(0,s.jsx)(n.strong,{children:"runners"})}),"."]}),"\n",(0,s.jsx)(a,{toc:u}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"library-management---file-test",children:"Library Management - File test"}),"\n",(0,s.jsx)(n.h5,{id:"executed",children:"Executed:"}),"\n",(0,s.jsx)(n.p,{children:"After Unmanic carries out tests on a file to determine if it should be added to the task queue. Prior to returning a result of said tests."}),"\n",(0,s.jsx)(n.h5,{id:"function",children:"Function:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"on_library_management_file_test(data)"})}),"\n",(0,s.jsx)(n.h5,{id:"provided-data",children:"Provided data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"library_id"})})," ",(0,s.jsx)(n.em,{children:"[integer]"})," - The library that the current task is associated with"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"path"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - String containing the full path to the file being tested."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"issues"})})," ",(0,s.jsx)(n.em,{children:"[list]"})," - List of currently found issues for not processing the file."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"add_file_to_pending_tasks"})})," ",(0,s.jsx)(n.em,{children:"[boolean]"})," - Boolean, is the file currently marked to be added to the queue for processing."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"priority_score"})})," ",(0,s.jsx)(n.em,{children:"[integer]"})," - An additional score that can be added to set the position of the new task in the task queue."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"shared_info"})})," ",(0,s.jsx)(n.em,{children:"[dictionary]"})," - Information provided by previous plugin runners. This can be appended to for subsequent runners."]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"example",children:"Example:"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"plugin.py"}),(0,s.jsxs)(n.p,{children:["For an up-to-date example, see the ",(0,s.jsx)(n.a,{href:"https://github.com/Unmanic/unmanic-plugins/blob/examples/source/custom_ffmpeg_process/plugin.py",children:"Example Plugins Repo"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import os\n\n\ndef on_library_management_file_test(data):\n    \"\"\"\n    Runner function - enables additional actions during the library management file tests.\n    The 'data' object argument includes:\n        library_id                      - The library that the current task is associated with\n        path                            - String containing the full path to the file being tested.\n        issues                          - List of currently found issues for not processing the file.\n        add_file_to_pending_tasks       - Boolean, is the file currently marked to be added to the queue for processing.\n        priority_score                  - Integer, an additional score that can be added to set the position of the new task in the task queue.\n        shared_info                     - Dictionary, information provided by previous plugin runners. This can be appended to for subsequent runners.\n    :param data:\n    :return:\n    \"\"\"\n\n    # Get the file extension\n    file_extension = os.path.splitext(data.get('path'))[-1][1:]\n\n    # Ensure the file's extension is lowercase\n    file_extension = file_extension.lower()\n\n    # If this is flash video file, add it to pending tasks\n    if file_extension.lower() in ['flv']:\n        data['add_file_to_pending_tasks'] = True\n\n    return\n"})})]}),"\n",(0,s.jsx)(n.h5,{id:"details",children:"Details:"}),"\n",(0,s.jsx)(n.p,{children:"This Plugin runner should be used when you wish to create custom actions or tests to be carried\nout on a file during the file test triggered by either the Library scan or the Library event watcher."}),"\n",(0,s.jsxs)(n.p,{children:["When you fail a test, you should also update the ",(0,s.jsx)(n.code,{children:"issues"})," list provided in the ",(0,s.jsx)(n.code,{children:"data"})," dictionary."]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"data['issues'].append({\n    'id':      '<PLUGIN NAME>',\n    'message': \"File should be ignored because <X>\",\n})\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"worker---processing-file",children:"Worker - Processing file"}),"\n",(0,s.jsx)(n.h5,{id:"executed-1",children:"Executed:"}),"\n",(0,s.jsx)(n.p,{children:"Just prior to the execution of the command subprocess within an Unmanic Worker process."}),"\n",(0,s.jsx)(n.h5,{id:"function-1",children:"Function:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"on_worker_process(data)"})}),"\n",(0,s.jsx)(n.h5,{id:"provided-data-1",children:"Provided data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"worker_log"})})," ",(0,s.jsx)(n.em,{children:"[list]"})," - The log lines that are being tailed by the frontend (can be empty)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"library_id"})})," ",(0,s.jsx)(n.em,{children:"[integer]"})," - The library that the current task is associated with."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"exec_command"})})," ",(0,s.jsx)(n.em,{children:"[list]"})," - A command that Unmanic should execute (can be empty)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"command_progress_parser"})})," ",(0,s.jsx)(n.em,{children:"[callable]"})," - A function that Unmanic can use to parse the STDOUT of the command to collect progress stats (can be empty)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"file_in"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The source file to be processed by the command."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"file_out"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The destination that the command should output (can be the same as the ",(0,s.jsx)(n.em,{children:"file_in"})," if necessary)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"original_file_path"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The absolute path to the original library file."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"repeat"})})," ",(0,s.jsx)(n.em,{children:"[boolean]"})," - Sets if this runner should be executed again once completed with the same variables."]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"example-1",children:"Example:"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"plugin.py"}),(0,s.jsxs)(n.p,{children:["For an up-to-date example, see the ",(0,s.jsx)(n.a,{href:"https://github.com/Unmanic/unmanic-plugins/blob/examples/source/custom_ffmpeg_process/plugin.py",children:"Example Plugins Repo"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from unmanic.libs.unplugins.settings import PluginSettings\nfrom unmanic.libs.system import System\n\n\nclass Settings(PluginSettings):\n    """\n    An object to hold a dictionary of settings accessible to the Plugin\n    class and able to be configured by users from within the Unmanic WebUI.\n\n    This class has a number of methods available to it for accessing these settings:\n\n        > get_setting(<key>)            - Fetch a single setting value. Or leave the \n                                        key argument empty and return the full dictionary.\n        > set_setting(<key>, <value>)   - Set a singe setting value.\n                                        Used by the Unmanic WebUI to save user settings.\n                                        Settings are stored on disk in order to be persistent.\n\n    """\n    settings = {\n        "Execute Command": True,\n        "Insert string into cache file name": "custom-string"\n    }\n\n\ndef on_worker_process(data):\n    """\n    Runner function - enables additional configured processing jobs during the worker stages of a task.\n\n    The \'data\' object argument includes:\n        worker_log              - Array, the log lines that are being tailed by the frontend. Can be left empty.\n        library_id              - Number, the library that the current task is associated with.\n        exec_command            - Array, a subprocess command that Unmanic should execute. Can be empty.\n        command_progress_parser - Function, a function that Unmanic can use to parse the STDOUT of the command to collect progress stats. Can be empty.\n        file_in                 - String, the source file to be processed by the command.\n        file_out                - String, the destination that the command should output (may be the same as the file_in if necessary).\n        original_file_path      - String, the absolute path to the original file.\n        repeat                  - Boolean, should this runner be executed again once completed with the same variables.\n\n    :param data:\n    :return:\n    """\n    settings = Settings(library_id=data.get(\'library_id\'))\n    system = System()\n    system_info = system.info()\n\n    custom_string = settings.get_setting(\'Insert string into cache file name\')\n    if custom_string:\n        tmp_file_out = os.path.splitext(data[\'file_out\'])\n        data[\'file_out\'] = "{}-{}-{}{}".format(tmp_file_out[0], custom_string, tmp_file_out[1])\n\n    if not settings.get_setting(\'Execute Command\'):\n        data[\'exec_command\'] = False\n\n        \n\n    return\n'})})]}),"\n",(0,s.jsx)(n.h5,{id:"details-1",children:"Details:"}),"\n",(0,s.jsx)(n.p,{children:"This Plugin runner should be used for carrying any custom command execution stages.\nThe runner itself is only required to configure the parameters of the command execution.\nThe main Unmanic process will take the data dictionary returned from this runner and execute\nthe command within it's own shell."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"post-processor---file-movements",children:"Post-processor - File movements"}),"\n",(0,s.jsx)(n.h5,{id:"executed-2",children:"Executed:"}),"\n",(0,s.jsx)(n.p,{children:"Just prior to file copy operation from cached output file to source file's directory."}),"\n",(0,s.jsx)(n.h5,{id:"function-2",children:"Function:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"on_postprocessor_file_movement(data)"})}),"\n",(0,s.jsx)(n.h5,{id:"provided-data-2",children:"Provided data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"source_data"})})," ",(0,s.jsx)(n.em,{children:"[dictionary]"})," - Data pertaining to the original source file."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"remove_source_file"})})," ",(0,s.jsx)(n.em,{children:"[boolean]"})," - Sets if Unmanic should remove the original source file after all copy operations are complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"copy_file"})})," ",(0,s.jsx)(n.em,{children:"[boolean]"})," - Sets if Unmanic should run a copy operation with the returned data variables."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"file_in"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The converted cache file to be copied by the postprocessor."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"file_out"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The destination file that the file will be copied to."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"run_default_file_copy"})})," ",(0,s.jsx)(n.em,{children:"[boolean]"})," - Whether Unmanic should perform the default file copy."]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"example-2",children:"Example:"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"plugin.py"}),(0,s.jsxs)(n.p,{children:["For an up-to-date example, see the ",(0,s.jsx)(n.a,{href:"https://github.com/Unmanic/unmanic-plugins/blob/examples/source/example_postprocessor_file_movement/plugin.py",children:"Example Plugins Repo"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def on_postprocessor_file_movement(data):\n    \"\"\"\n    Runner function - configures additional postprocessor file movements during the postprocessor stage of a task.\n\n    The 'data' object argument includes:\n        source_data             - Dictionary containing data pertaining to the original source file ('abspath' and 'basename').\n        remove_source_file      - Boolean, should Unmanic remove the original source file after all copy operations are complete.\n        copy_file               - Boolean, should Unmanic run a copy operation with the returned data variables.\n        file_in                 - The converted cache file to be copied by the postprocessor.\n        file_out                - The destination file that the file will be copied to.\n        run_default_file_copy   - Whether Unmanic should perform the default file copy.\n\n    :param data:\n    :return:\n    \"\"\"\n\n    return\n"})})]}),"\n",(0,s.jsx)(n.h5,{id:"details-2",children:"Details:"}),"\n",(0,s.jsx)(n.p,{children:"This Plugin runner should be used for executing additional file movements of a completed task."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"This Plugin runner is only executed on a successfully completed task."})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"post-processor---marking-task-successfailure",children:"Post-processor - Marking task success/failure"}),"\n",(0,s.jsx)(n.h5,{id:"executed-3",children:"Executed:"}),"\n",(0,s.jsx)(n.p,{children:"Just prior to the task cache directory cleanup."}),"\n",(0,s.jsx)(n.h5,{id:"function-3",children:"Function:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"on_postprocessor_task_results(data)"})}),"\n",(0,s.jsx)(n.h5,{id:"provided-data-3",children:"Provided data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"final_cache_path"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The path to the final cache file that was then used as the source for all destination files."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"library_id"})})," ",(0,s.jsx)(n.em,{children:"[integer]"})," - The library that the current task is associated with."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"task_processing_success"})})," ",(0,s.jsx)(n.em,{children:"[boolean]"})," - Specifies if all task processes complete successfully."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"file_move_processes_success"})})," ",(0,s.jsx)(n.em,{children:"[boolean]"})," - Specifies if all postprocessor movement tasks complete successfully."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"destination_files"})})," ",(0,s.jsx)(n.em,{children:"[list]"})," - All file paths created by postprocessor file movements."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"source_data"})})," ",(0,s.jsx)(n.em,{children:"[dictionary]"})," - Data pertaining to the original source file."]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"example-3",children:"Example:"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"plugin.py"}),(0,s.jsxs)(n.p,{children:["For an up-to-date example, see the ",(0,s.jsx)(n.a,{href:"https://github.com/Unmanic/unmanic-plugins/blob/examples/source/example_postprocessor_task_results/plugin.py",children:"Example Plugins Repo"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def on_postprocessor_task_results(data):\n    """\n    Runner function - provides a means for additional postprocessor functions based on the task success.\n\n    The \'data\' object argument includes:\n        final_cache_path                - The path to the final cache file that was then used as the source for all destination files.\n        library_id                      - The library that the current task is associated with.\n        task_processing_success         - Boolean, did all task processes complete successfully.\n        file_move_processes_success     - Boolean, did all postprocessor movement tasks complete successfully.\n        destination_files               - List containing all file paths created by postprocessor file movements.\n        source_data                     - Dictionary containing data pertaining to the original source file.\n\n    :param data:\n    :return:\n    """\n    return\n'})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"frontend---data-panel",children:"Frontend - Data Panel"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"(since v0.1.0)"})}),"\n",(0,s.jsx)(n.h5,{id:"executed-4",children:"Executed:"}),"\n",(0,s.jsx)(n.p,{children:"From front-end URL"}),"\n",(0,s.jsx)(n.h5,{id:"function-4",children:"Function:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"render_frontend_panel(data)"})}),"\n",(0,s.jsx)(n.h5,{id:"provided-data-4",children:"Provided data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"content_type"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The content type to be set when writing back to the browser."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"content"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The content to print to the browser."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"path"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The path received after the '/unmanic/panel' path."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"arguments"})})," ",(0,s.jsx)(n.em,{children:"[dictionary]"})," - A dictionary of GET arguments received."]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"example-4",children:"Example:"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"plugin.py"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def render_frontend_panel(data):\n    \"\"\"\n    Runner function - display a custom data panel in the frontend.\n\n    The 'data' object argument includes:\n        content_type                    - The content type to be set when writing back to the browser.\n        content                         - The content to print to the browser.\n        path                            - The path received after the '/unmanic/panel' path.\n        arguments                       - A dictionary of GET arguments received.\n\n    :param data:\n    :return:\n    \"\"\"\n\n    with open(os.path.abspath(os.path.join(os.path.dirname(__file__), 'static', 'index.html'))) as f:\n        content = f.read()\n        data['content'] = content.replace(\"{cache_buster}\", str(uuid.uuid4()))\n\n    return\n"})})]}),"\n",(0,s.jsx)(n.h5,{id:"details-3",children:"Details:"}),"\n",(0,s.jsxs)(n.p,{children:["This Plugin runner type provides a ",(0,s.jsx)(n.em,{children:"Data Panel"})," which will be displayed to the front-end."]}),"\n",(0,s.jsxs)(n.p,{children:["Pages will be served from ",(0,s.jsx)(n.code,{children:"/unmanic/ui/data-panels?pluginId={plugin ID}"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Pages will be provided with a GET parameter either ",(0,s.jsx)(n.code,{children:"?theme=light"})," or ",(0,s.jsx)(n.code,{children:"?theme=dark"})," to assist with theme mapping with the main frontend."]}),"\n",(0,s.jsxs)(n.p,{children:["Static assets stored in the plugins ",(0,s.jsx)(n.a,{href:"/docs/development/writing_plugins/introduction#directory-static-optional",children:"static"})," directory will\nmade available via the webserver at ",(0,s.jsx)(n.code,{children:"/unmanic/panel/{plugin ID}/static/(.*)"})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"frontend---plugin-api",children:"Frontend - Plugin API"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"(since v0.2.0)"})}),"\n",(0,s.jsx)(n.h5,{id:"executed-5",children:"Executed:"}),"\n",(0,s.jsx)(n.p,{children:"From front-end URL"}),"\n",(0,s.jsx)(n.h5,{id:"function-5",children:"Function:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"render_plugin_api(data)"})}),"\n",(0,s.jsx)(n.h5,{id:"provided-data-5",children:"Provided data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"content_type"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The content type to be set when writing back to the browser."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"content"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The content to print to the browser."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"path"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The path received after the '/unmanic/panel' path."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"uri"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The request uri."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"query"})})," ",(0,s.jsx)(n.em,{children:"[string]"})," - The request query."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"arguments"})})," ",(0,s.jsx)(n.em,{children:"[dictionary]"})," - A dictionary of GET arguments received."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"body"})})," ",(0,s.jsx)(n.em,{children:"[dictionary]"})," - A dictionary of body arguments received."]}),"\n"]}),"\n",(0,s.jsx)(n.h5,{id:"example-5",children:"Example:"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"plugin.py"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def render_plugin_api(data):\n    \"\"\"\n    Runner function - display a custom data panel in the frontend.\n\n    The 'data' object argument includes:\n        content_type                    - The content type to be set when writing back to the browser.\n        content                         - The content to print to the browser.\n        path                            - The path received after the '/unmanic/panel' path.\n        uri                             - The request uri.\n        query                           - The request query.\n        arguments                       - A dictionary of GET arguments received.\n        body                            - A dictionary of body arguments received.\n\n    :param data:\n    :return:\n    \"\"\"\n\n    # Store webhook content\n    settings = Settings()\n    profile_directory = settings.get_profile_directory()\n    time_now = time.time()\n    request_body = json.loads(data.get('body', '{}'))\n    with open(os.path.join(profile_directory, 'sonarr_webhook_{}.json'.format(time_now)), 'w') as outfile:\n        json.dump(request_body, outfile, indent=2)\n\n    return\n"})})]}),"\n",(0,s.jsx)(n.h5,{id:"details-4",children:"Details:"}),"\n",(0,s.jsx)(n.p,{children:"This Plugin runner type provides an API endpoint which may be used to receive webhook requests or function as a REST API for the plugin."}),"\n",(0,s.jsxs)(n.p,{children:["Pages will be served from ",(0,s.jsx)(n.code,{children:"/unmanic/plugin_api/{plugin ID}"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},5195:(e,n,t)=>{t.d(n,{A:()=>x});var i=t(6540),s=t(6342);function r(e){const n=e.map(e=>({...e,parentIndex:-1,children:[]})),t=Array(7).fill(-1);n.forEach((e,n)=>{const i=t.slice(2,e.level);e.parentIndex=Math.max(...i),t[e.level]=n});const i=[];return n.forEach(e=>{const{parentIndex:t,...s}=e;t>=0?n[t].children.push(s):i.push(s)}),i}function l({toc:e,minHeadingLevel:n,maxHeadingLevel:t}){return e.flatMap(e=>{const i=l({toc:e.children,minHeadingLevel:n,maxHeadingLevel:t});return function(e){return e.level>=n&&e.level<=t}(e)?[{...e,children:i}]:i})}function o(e){const n=e.getBoundingClientRect();return n.top===n.bottom?o(e.parentNode):n}function a(e,{anchorTopOffset:n}){const t=e.find(e=>o(e).top>=n);if(t){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(o(t))?t:e[e.indexOf(t)-1]??null}return e[e.length-1]??null}function d(){const e=(0,i.useRef)(0),{navbar:{hideOnScroll:n}}=(0,s.p)();return(0,i.useEffect)(()=>{e.current=n?0:document.querySelector(".navbar").clientHeight},[n]),e}function c(e){const n=(0,i.useRef)(void 0),t=d();(0,i.useEffect)(()=>{if(!e)return()=>{};const{linkClassName:i,linkActiveClassName:s,minHeadingLevel:r,maxHeadingLevel:l}=e;function o(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(i),o=function({minHeadingLevel:e,maxHeadingLevel:n}){const t=[];for(let i=e;i<=n;i+=1)t.push(`h${i}.anchor`);return Array.from(document.querySelectorAll(t.join()))}({minHeadingLevel:r,maxHeadingLevel:l}),d=a(o,{anchorTopOffset:t.current}),c=e.find(e=>d&&d.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e));e.forEach(e=>{!function(e,t){t?(n.current&&n.current!==e&&n.current.classList.remove(s),e.classList.add(s),n.current=e):e.classList.remove(s)}(e,e===c)})}return document.addEventListener("scroll",o),document.addEventListener("resize",o),o(),()=>{document.removeEventListener("scroll",o),document.removeEventListener("resize",o)}},[e,t])}var h=t(8774),u=t(4848);function p({toc:e,className:n,linkClassName:t,isChild:i}){return e.length?(0,u.jsx)("ul",{className:i?void 0:n,children:e.map(e=>(0,u.jsxs)("li",{children:[(0,u.jsx)(h.A,{to:`#${e.id}`,className:t??void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,u.jsx)(p,{isChild:!0,toc:e.children,className:n,linkClassName:t})]},e.id))}):null}const m=i.memo(p);function x({toc:e,className:n="table-of-contents table-of-contents__left-border",linkClassName:t="table-of-contents__link",linkActiveClassName:o,minHeadingLevel:a,maxHeadingLevel:d,...h}){const p=(0,s.p)(),x=a??p.tableOfContents.minHeadingLevel,g=d??p.tableOfContents.maxHeadingLevel,f=function({toc:e,minHeadingLevel:n,maxHeadingLevel:t}){return(0,i.useMemo)(()=>l({toc:r(e),minHeadingLevel:n,maxHeadingLevel:t}),[e,n,t])}({toc:e,minHeadingLevel:x,maxHeadingLevel:g});return c((0,i.useMemo)(()=>{if(t&&o)return{linkClassName:t,linkActiveClassName:o,minHeadingLevel:x,maxHeadingLevel:g}},[t,o,x,g])),(0,u.jsx)(m,{toc:f,className:n,linkClassName:t,...h})}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);